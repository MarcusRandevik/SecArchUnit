ext.moduleName = 'com.tngtech.archunit.junit4'

dependencies {
    compile project(path: ':archunit', configuration: 'shadow')
    compile project(path: ':archunit-junit', configuration: 'api')
    compile project(path: ':archunit-junit', configuration: 'shadow')
    compile dependency.guava
    compile dependency.junit4
    compile dependency.slf4j

    testCompile dependency.log4j_api
    testCompile dependency.log4j_core
    testCompile dependency.log4j_slf4j
    testCompile dependency.mockito
    testCompile dependency.assertj
    testCompile(dependency.assertj_guava) {
        exclude module: 'assertj-core'
        exclude module: 'guava'
    }
    testCompile project(path: ':archunit', configuration: 'tests')
    testCompile project(path: ':archunit-junit', configuration: 'tests')
}

javadoc {
    source(['api', 'main'].collect { project(':archunit-junit').sourceSets[it].allJava })
}
sourcesJar {
    ['api', 'main'].each {
        from project(':archunit-junit').sourceSets[it].allSource
    }
}

configureSlowTestsFor this

shadowJar {
    exclude 'META-INF/**'

    dependencies {
        exclude(project(':archunit'))
        exclude(dependency(dependency.junit4))
        exclude(dependency(dependency.slf4j))
        exclude(dependency(dependency.hamcrest)) // Shadow doesn't respect transitive excludes :-(
    }
}

def configureDependencies = { pom ->
    pom.dependencies.removeAll {
        it.scope != 'compile' || !(it.artifactId in ['archunit', 'archunit-junit5-api', 'archunit-junit5-engine-api', 'junit'])
    }
    pom.dependencies.find { it.artifactId == 'archunit' }.classifier = null
}
this.with project(':archunit-junit').configureJUnitArchive(configureDependencies)